/********package*********/
sqflite:
path:

/********create DatabaseHelper Class*************/
import 'package:my_flutter_design/LocalDatabase/User.dart';
import 'package:sqflite/sqflite.dart' as sql;
import 'package:path/path.dart' as path;
import 'package:sqflite/sqlite_api.dart';

class DBHelper {
  static Future<Database> database() async {
    final dbPath = await sql.getDatabasesPath();
    return sql.openDatabase(path.join(dbPath, 'users.db'),
        onCreate: (db, version) {
          return db.execute(
              'CREATE TABLE users(id TEXT PRIMARY KEY, name TEXT, age INTEGER)');
        }, version: 1);
  }

  static Future<void> insert(String table, Map<String, Object> data) async {
    final db = await DBHelper.database();
    db.insert(table, data);
  }

  static Future<List<Map<String, dynamic>>> getData(String table) async {
    final db = await DBHelper.database();
    final List<Map<String, dynamic>> maps= await db.query(table);
    return maps;
  }

  static Future<void> deleteData(String table, String id) async {
    final db = await DBHelper.database();

    db.delete(table, where: 'id = ?', whereArgs: [id]);
  }

  static Future<void> updateData(
      String table, String id, Map<String, Object> data) async {
    final db = await DBHelper.database();

    db.update(table, data, where: 'id = ?', whereArgs: [id]);
  }
}


/***************create a Service class************************/


import 'User.dart';
import 'database_helper.dart';

class UserServices {
  void saveUser(String name, int age) {
    DBHelper.insert(
        'users', {'id': DateTime.now().toString(), 'name': name, 'age': age});
  }

  Future<List<User>> fetchUsers() async {
    final maps = await DBHelper.getData('users');
    return List.generate(maps.length, (i) {
      return User(
        id: maps[i]['id'],
        name: maps[i]['name'],
        age: maps[i]['age'],
      );
    });
  }

  void deleteUser(String id) {
    DBHelper.deleteData('users', id);
  }

  void updateUser(String id, String name, int age) {
    DBHelper.updateData('users', id,
        {'id': DateTime.now().toString(), 'name': name, 'age': age});
  }
}

/*****************create Model Class**********************/
class User {
  String id;
  String name;
  int age;

  User({required this.id, required this.name, required this.age});
}

/***********Now use service class to saveData and fetchData or any other manipulation**************/
final services = UserServices();

/**********in main method initialize this***********/
void main() {
  WidgetsFlutterBinding.ensureInitialized(); //this
  runApp(MyApp());
}
